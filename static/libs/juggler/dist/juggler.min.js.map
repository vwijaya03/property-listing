{"version":3,"sources":["juggler.js"],"names":["window","juggle","name","Juggler","registry","hasOwnProperty","entry","matchedTarget","i","targets","length","target","mediaQuery","matchMedia","matches","flag","getFlag","location","sourceComment","parentNode","insertBefore","sourceElement","nextSibling","comment","flags","init","Array","prototype","slice","call","document","querySelectorAll","forEach","targetElement","dataset","jugglerTarget","sourceElements","Error","createComment","this","push","jugglerMediaQuery","jugglerFlag","replaceChild","bind","addEventListener","setFlag","value"],"mappings":"CAAC,SAAUA,GACP,aAEA,SAASC,IACL,IAAK,IAAIC,KAAQF,EAAOG,QAAQC,SAC5B,GAAKJ,EAAOG,QAAQC,SAASC,eAAeH,GAA5C,CAQA,IAAK,IAJDI,EAAQN,EAAOG,QAAQC,SAASF,GAChCK,EAAgB,KAGXC,EAAI,EAAGA,EAAIF,EAAMG,QAAQC,OAAQF,IAAK,CAC3C,IAAIG,EAASL,EAAMG,QAAQD,GAG3B,GAA2B,OAAtBG,EAAOC,YAAuBZ,EAAOa,WAAWF,EAAOC,YAAYE,QAAU,CAC9EP,EAAgBI,EAChB,MAIiB,OAAhBA,EAAOI,MAAiBf,EAAOG,QAAQa,QAAQL,EAAOI,QACvDR,EAAgBI,GAKF,OAAlBJ,EAWAD,EAAMW,WAAaX,EAAMY,gBACzBZ,EAAMY,cAAcC,WAAWC,aAAad,EAAMe,cAAef,EAAMY,cAAcI,aACrFhB,EAAMW,SAAWX,EAAMY,eAXnBX,EAAcgB,UAAYjB,EAAMW,WAChCV,EAAcgB,QAAQJ,WAAWC,aAAad,EAAMe,cAAed,EAAcgB,QAAQD,aACzFhB,EAAMW,SAAWX,EAAMiB,UAcvCvB,EAAOG,QAAUH,EAAOG,UAIpBqB,SAKApB,YAMAqB,KAAM,WACFC,MAAMC,UAAUC,MAAMC,KAAKC,SAASC,iBAAiB,0BAA0BC,QAAQ,SAAUC,GAC7F,IAAItB,EAASsB,EAAcC,QAAQC,cAC/BC,EAAiBN,SAASC,iBAAiB,yBAA2BpB,EAAS,MAGnF,GAA8B,IAA1ByB,EAAe1B,OACf,MAAM,IAAI2B,MAAM,uBAAyB1B,EAAS,qBAItD,GAAIyB,EAAe1B,OAAS,EACxB,MAAM,IAAI2B,MAAM,uBAAyB1B,EAAS,oBAAsByB,EAAe1B,OAAS,8BAGpG,IAAIW,EAAgBe,EAAe,GAC/BlB,EAAgBY,SAASQ,cAAc,mBAAqB3B,GAC5DY,EAAUO,SAASQ,cAAc,mBAAqB3B,GAGrD4B,KAAKnC,SAASC,eAAeM,KAC9B4B,KAAKnC,SAASO,IACVM,SAAUC,EACVG,cAAeA,EACfH,cAAeA,EACfT,YAIJY,EAAcF,WAAWC,aAAaF,EAAeG,IAGzDkB,KAAKnC,SAASO,GAAQF,QAAQ+B,MAC1BjB,QAASA,EACTX,WAAYqB,EAAcC,QAAQO,mBAAqB,KACvD1B,KAAMkB,EAAcC,QAAQQ,aAAe,OAI/CT,EAAcd,WAAWwB,aAAapB,EAASU,IACjDW,KAAKL,OAEPvC,EAAO6C,iBAAiB,SAAU5C,GAClCA,KASJ6C,QAAS,SAAU5C,EAAM6C,GACrBR,KAAKf,MAAMtB,KAAU6C,EACrB9C,KAQJe,QAAS,SAAUd,GACf,QAAKqC,KAAKf,MAAMnB,eAAeH,IAIxBqC,KAAKf,MAAMtB,KAjI9B,CAoIEF","file":"juggler.min.js","sourcesContent":["(function (window) {\n    'use strict';\n\n    function juggle() {\n        for (var name in window.Juggler.registry) {\n            if (!window.Juggler.registry.hasOwnProperty(name)) {\n                continue;\n            }\n\n            var entry = window.Juggler.registry[name];\n            var matchedTarget = null;\n\n            // Find the matching target\n            for (var i = 0; i < entry.targets.length; i++) {\n                var target = entry.targets[i];\n\n                // Media query matches, break the loop as media query has a priority\n                if ((target.mediaQuery !== null && window.matchMedia(target.mediaQuery).matches)) {\n                    matchedTarget = target;\n                    break;\n                }\n\n                // Flag matches\n                if ((target.flag !== null && window.Juggler.getFlag(target.flag))) {\n                    matchedTarget = target;\n                }\n            }\n\n            // Move the element to the matched target\n            if (matchedTarget !== null) {\n                // Only move it if it's not already there\n                if (matchedTarget.comment !== entry.location) {\n                    matchedTarget.comment.parentNode.insertBefore(entry.sourceElement, matchedTarget.comment.nextSibling);\n                    entry.location = entry.comment;\n                }\n\n                continue;\n            }\n\n            // Move the element from target to source, but only if it's not already there\n            if (entry.location !== entry.sourceComment) {\n                entry.sourceComment.parentNode.insertBefore(entry.sourceElement, entry.sourceComment.nextSibling);\n                entry.location = entry.sourceComment;\n            }\n        }\n    }\n\n    window.Juggler = window.Juggler || {\n        /**\n         * Custom flags\n         */\n        flags: {},\n\n        /**\n         * Element registry\n         */\n        registry: {},\n\n        /**\n         * Initialize the Juggler\n         * @returns {void}\n         */\n        init: function () {\n            Array.prototype.slice.call(document.querySelectorAll('[data-juggler-target]')).forEach(function (targetElement) {\n                var target = targetElement.dataset.jugglerTarget;\n                var sourceElements = document.querySelectorAll('[data-juggler-source=\"' + target + '\"]');\n\n                // Throw an error if the source element has been not found\n                if (sourceElements.length === 0) {\n                    throw new Error('The element source \"' + target + '\" does not exist.');\n                }\n\n                // Throw an error if the number of source elements is bigger than one\n                if (sourceElements.length > 1) {\n                    throw new Error('The element source \"' + target + '\" is not unique. ' + sourceElements.length + ' elements have been found.');\n                }\n\n                var sourceElement = sourceElements[0];\n                var sourceComment = document.createComment('Juggler source: ' + target);\n                var comment = document.createComment('Juggler target: ' + target);\n\n                // Create the registry entry if it does not exist yet\n                if (!this.registry.hasOwnProperty(target)) {\n                    this.registry[target] = {\n                        location: sourceComment,\n                        sourceElement: sourceElement,\n                        sourceComment: sourceComment,\n                        targets: []\n                    };\n\n                    // Prepend the source comment to element\n                    sourceElement.parentNode.insertBefore(sourceComment, sourceElement);\n                }\n\n                this.registry[target].targets.push({\n                    comment: comment,\n                    mediaQuery: targetElement.dataset.jugglerMediaQuery || null,\n                    flag: targetElement.dataset.jugglerFlag || null\n                });\n\n                // Replace the element with target comment\n                targetElement.parentNode.replaceChild(comment, targetElement);\n            }.bind(this));\n\n            window.addEventListener('resize', juggle);\n            juggle();\n        },\n\n        /**\n         * Set the flag value\n         * @param {String} name Flag name\n         * @param {Boolean} value Flag value (true or false)\n         * @returns {void}\n         */\n        setFlag: function (name, value) {\n            this.flags[name] = !!value;\n            juggle();\n        },\n\n        /**\n         * Get the flag value\n         * @param {String} name Flag name\n         * @returns {Boolean} Flag value (true or false)\n         */\n        getFlag: function (name) {\n            if (!this.flags.hasOwnProperty(name)) {\n                return false;\n            }\n\n            return this.flags[name];\n        }\n    };\n}(window));\n"]}